MongoDB Aggregation 

You can use the framework to build a MongoDB Aggregate Pipeline with one or more stages. A document Aggregation Pipeline stage can perform some of the following operations:

On the input documents, each stage conducts an operation. For instance, a stage can filter, organize or calculate values in documents.
The output documents from one step are handed on to the next by one of the stages.
The results of an Aggregate Pipeline can be returned for groups of documents.
Many types of Aggregation Stages can be used in an aggregation pipeline. Some of these have been listed below:

$match: It helps to filter the input record according to the set of specified expressions.

$project: It generates a resultset with a subset of input or computed fields.

$group: It groups some columns & performs aggregations on others.
$limit: It picks first n documents from input sets.
$skip: It ignores the first n documents from the input set.
$sort: It helps to sort all the input documents according to the specified object.

$unwind: It extracts an array field from a document with n elements. Then it returns n documents, with each element being inserted as a field to each document in place of the array.
$out: It takes all the documents returned from the prior stage and then writes them to the collection.

----> Unversites Collection created like:
            db.universities.insert([
                {
                country : 'Spain',
                city : 'Salamanca',
                name : 'USAL',
                location : {
                    type : 'Point',
                    coordinates : [ -5.6722512,17, 40.9607792 ]
                },
                students : [
                    { year : 2014, number : 24774 },
                    { year : 2015, number : 23166 },
                    { year : 2016, number : 21913 },
                    { year : 2017, number : 21715 }
                ]
                },
                {
                country : 'Spain',
                city : 'Salamanca',
                name : 'UPSA',
                location : {
                    type : 'Point',
                    coordinates : [ -5.6691191,17, 40.9631732 ]
                },
                students : [
                    { year : 2014, number : 4788 },
                    { year : 2015, number : 4821 },
                    { year : 2016, number : 6550 },
                    { year : 2017, number : 6125 }
                ]
                }
                ])
---->Course collection created:
            db.courses.insert([
                    {
                    university : 'USAL',
                    name : 'Computer Science',
                    level : 'Excellent'
                    },
                    {
                    university : 'USAL',
                    name : 'Electronics',
                    level : 'Intermediate'
                    },
                    {
                    university : 'USAL',
                    name : 'Communication',
                    level : 'Excellent'
                    }
                    ])

-----> Using $match command ;
            The $match stage allows us to choose just those documents from a collection that we want to work with. It does this by filtering out those that do not follow our requirements.

In the following example, we only want to work with those documents which specify that Spain is the value of the field country, and Salamanca is the value of the field city.

In order to get a readable output, I am going to add .pretty() at the end of all the commands.

                db.universities.aggregate([
                { $match : { country : 'Spain', city : 'Salamanca' } }
                ]).pretty()
                The output isâ€¦

                {
                "_id" : ObjectId("5b7d9d9efbc9884f689cdba9"),
                "country" : "Spain","city" : "Salamanca",
                "name" : "USAL",
                "location" : {
                    "type" : "Point",
                    "coordinates" : [
                            -5.6722512,
                            17,
                            40.9607792
                    ]
                },
                "students" : [
                        {
                            "year" : 2014,
                            "number" : 24774
                        },
                        {
                            "year" : 2015,
                            "number" : 23166
                        },
                        {
                            "year" : 2016,
                            "number" : 21913
                        },
                        {
                            "year" : 2017,
                            "number" : 21715
                        }
                    ]
                }
                {
                    "_id" : ObjectId("5b7d9d9efbc9884f689cdbaa"),
                    "country" : "Spain",
                    "city" : "Salamanca",
                    "name" : "UPSA",
                    "location" : {
                        "type" : "Point",
                        "coordinates" : [
                            -5.6691191,
                            17,
                            40.9631732
                        ]
                    },
                    "students" : [
                        {
                            "year" : 2014,
                            "number" : 4788
                        },
                        {
                            "year" : 2015,
                            "number" : 4821
                        },
                        {
                            "year" : 2016,
                            "number" : 6550
                        },
                        {
                            "year" : 2017,
                            "number" : 6125
                        }
                    ]
                }
------->    $project

 The $project() stage is used to do this and to add any calculated fields that you need.
In this example, we only need the fields country, city and name.
        db.universities.aggregate([
  { $project : { _id : 0, country : 1, city : 1, name : 1 } }
]).pretty()

output
        { "country" : "Spain", "city" : "Salamanca", "name" : "USAL" }
        { "country" : "Spain", "city" : "Salamanca", "name" : "UPSA" }

------->   Using $group
            With the $group() stage, we can perform all the aggregation or summary queries that we need, such as finding counts, totals, averages or maximums.
          db.universities.aggregate([{ $group : { _id : '$name', totaldocs : { $sum : 1 } } }]).pretty()  
        output
        { "_id" : "UPSA", "totaldocs" : 1 }
        { "_id" : "USAL", "totaldocs" : 1 }

------->  Using $out
            This is an unusual type of stage because it allows you to carry the results of your aggregation over into a new collection,

            db.universities.aggregate([{ $group : { _id : '$name', totaldocs : { $sum : 1 } } },
            { $out : 'aggResults' }
            ])
     output
     db.aggResults.find().pretty()
        { "_id" : "UPSA", "totaldocs" : 1 }
        { "_id" : "USAL", "totaldocs" : 1 }

-------->  Using $unwind
           The $unwind() stage enables us to work with the values of the fields within an array.
           Where there is an array field within the input documents, you will sometimes need to output the document several times, once for every element of that array.

           eg:db.universities.aggregate([
  { $match : { name : 'USAL' } },
  { $unwind : '$students' }
]).pretty()

We get each array of students to be spilt to display individual

------>$addfields

It is possible that you need to make some changes to your output in the way of new fields. In the next example, we want to add the year of the foundation of the university.
eg:db.universities.aggregate([
  { $match : { name : 'USAL' } },
  { $addFields : { foundation_year : 1218 } }
]).pretty()

output
{
	"_id" : ObjectId("5b7d9d9efbc9884f689cdba9"),
	"country" : "Spain",
	"city" : "Salamanca",
	"name" : "USAL",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			-5.6722512,
			17,
			40.9607792
		]
	},
	"students" : [
		{
			"year" : 2014,
			"number" : 24774
		},
		{
			"year" : 2015,
			"number" : 23166
		},
		{
			"year" : 2016,
			"number" : 21913
		},
		{
			"year" : 2017,
			"number" : 21715
		}
	],
	"foundation_year" : 1218///extra fiels add
}
By using below command we can insert extra field to student array;
            db.universities.find({name:"UPSA"}).forEach(function(e){
            var t=e.students;
            t.forEach(function(e){
                e.best=124
            });
            db.universities.update({_id:e._id},{$set:{students:t}})
            })